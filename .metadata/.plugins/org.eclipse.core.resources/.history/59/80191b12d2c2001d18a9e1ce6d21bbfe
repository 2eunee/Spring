package com.shop.repository;

import java.time.LocalDateTime;
import java.util.List;

import javax.persistence.EntityManager;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.thymeleaf.util.StringUtils;

import com.querydsl.core.QueryResults;
import com.querydsl.core.types.dsl.BooleanExpression;
import com.querydsl.jpa.impl.JPAQueryFactory;
import com.shop.constant.ItemSellStatus;
import com.shop.dto.ItemSearchDto;
import com.shop.entity.Item;
import com.shop.entity.QItem;

public class ItemReponsitoryCustomImpl implements ItemReponsitoryCustom{
	
	private JPAQueryFactory queryFactory; //동적쿼리생성
	
	public ItemReponsitoryCustomImpl(EntityManager em) {
		this.queryFactory = new JPAQueryFactory(em);
	}
	
	private BooleanExpression searchSellStatusEq(ItemSellStatus searchSellStatus) {
		return searchSellStatus ==
				null? null : QItem.item.itemSellStatus.eq(searchSellStatus);
	}
	
	//날짜로 조회
	//all 전체, 1d:하루, 1w:한주, 1m:한달, 6m:최근 6개월 동안 등록한 상품
	private BooleanExpression regDtsAfter(String searchDateType) {
		LocalDateTime dateTime = LocalDateTime.now();
		
		if(StringUtils.equals("all", searchDateType) || searchDateType == null) {
			return null;
		}else if(StringUtils.equals("1d",searchDateType)) {
			dateTime = dateTime.minusDays(1);
		}else if(StringUtils.equals("1w",searchDateType)) {
			dateTime = dateTime.minusWeeks(1);
		}else if(StringUtils.equals("1m",searchDateType)) {
			dateTime = dateTime.minusMonths(1);
		}else if(StringUtils.equals("6m",searchDateType)) {
			dateTime = dateTime.minusMonths(6);
		}
		
		return QItem.item.regTime.after(dateTime);
	}
	
	private BooleanExpression searchByLike(String searchBy, String searchQuery) {
		if(StringUtils.equals("itemNm", searchBy)) {
			return QItem.item.itemNm.like("%"+searchQuery+"%");
		}else if(StringUtils.equals("createBy", searchBy)) {
			return QItem.item.createBy.like("%"+searchQuery+"%");
		}
		
		return null;
	}

	@Override
	public Page<Item> getAdminItemPage(ItemSearchDto itemSearchDto, Pageable pageable) {
		
		QueryResults<Item> results = queryFactory
				.select(QItem.item)
				.where(regDtsAfter(itemSearchDto.getSearchDateType()),
						searchSellStatusEq(itemSearchDto.getSearchSellStatus()),
						searchByLike(itemSearchDto.getSearchBy(),
		itemSearchDto.getSearchQuery()))
				.orderBy(QItem.item.id.desc())
				.offset(pageable.getOffset()) // 몇페이지이인지
				.limit(pageable.getPageSize()) // 몇페이지를 가져올 것인지
				.fetchResults();
		
		List<Item> content = results.getResults();
		long total = results.getTotal();
		return new PageImpl<>(content, pageable, total);
		
	}
	

}
