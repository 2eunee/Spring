package com.shop.entity;

import java.time.LocalDateTime;

import javax.persistence.EntityManager;
import javax.persistence.EntityNotFoundException;
import javax.persistence.PersistenceContext;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.Rollback;
//import org.springframework.test.annotation.Rollback;
import org.springframework.transaction.annotation.Transactional;

import com.shop.constant.ItemSellStatus;
import com.shop.repository.ItemRepository;
import com.shop.repository.MemberRepository;
import com.shop.repository.OrderItemRepository;
import com.shop.repository.OrderRepository;

@SpringBootTest
@Transactional
@Rollback(value = false)
public class OrderTests {
	
	@Autowired
	MemberRepository memberRepository;
	
	@Autowired
	ItemRepository itemRepository;
	
	@Autowired
	OrderRepository orderRepository;
	
	@Autowired
	OrderItemRepository orderItemRepository;
	
	@PersistenceContext 
	EntityManager em;
	
	public Item createItem() {
	Item item = new Item();
	
	item.setItemNm("테스트 상품");
	item.setPrice(10000);
	item.setItemDetail("테스트상품 상세");
	item.setItemSellStatus(ItemSellStatus.SELL);
	item.setStockNumber(100);
	item.setRegTime(LocalDateTime.now());
	item.setUpdatTime(LocalDateTime.now());
	return item;
}

	public Order createOrder() {
		Order order = new Order();
		
		for(int i = 0; i<3; i++) {
			Item item = createItem();
			OrderItem orderitem = new  OrderItem();
			
			orderitem.setItem(item);
			orderitem.setCount(10);
			orderitem.setOrderprice(1000);
			orderitem.setOrder(order);
			order.getOrderItems().add(orderitem);
		}
		
		Member member = new Member();
		memberRepository.save(member);
		
		order.setMember(member);
		orderRepository.save(order);
		
		return order;
		
	}
	
	@Test
	@DisplayName("고아객체 제거 테스트")
	public void orphanRemovalTest() {
		Order order = this.createOrder();
		order.getOrderItems().remove(0);
		em.flush();
	}
	
	@Test
	@DisplayName("지연로딩 테스트")
	public void lazyLodingTest() {
		Order order = createOrder();
		
		Long orderItemId = order.getOrderItems().get(0).getId();
		em.flush();
		em.clear();
		
		OrderItem orderItem = orderItemRepository.findById(orderItemId)
				.orElseThrow(EntityNotFoundException::new);
		System.out.println("order class : " + orderItem.getOrder().getClass());
	}

}
