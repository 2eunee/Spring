/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.53
 * Generated at: 2023-03-02 03:15:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.order;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class addressRegister_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/C:/Works3/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/hosinsa/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/C:/Works3/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/hosinsa/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1673235570323L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.3.min.js\" integrity=\"sha256-pvPw+upLPUjgMXY0G+8O0xUf+/Im1MZjXxxgOcBQBXU=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"../../../resources/css/hosinsa.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css\">\r\n");
      out.write("<div class=\"addressWrap\">\r\n");
      out.write("	<h2>신규 배송지</h2>\r\n");
      out.write("	<form class=\"address_registerForm\" action=\"/order/address/register\" method=\"post\" >\r\n");
      out.write("		<table class=\"registerTable\">\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th> 이름 </th>\r\n");
      out.write("				<td><input type=\"text\" name=\"recipient\" value=\"\" placeholder=\"수령인\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th> 배송지명(선택) </th>\r\n");
      out.write("				<td><input type=\"text\" name=\"shipping\" value=\"\" placeholder=\"배송지명\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th> 휴대전화 </th>\r\n");
      out.write("				<td><input type=\"text\" name=\"phone\" value=\"\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th> 전화번호 </th>\r\n");
      out.write("				<td><input type=\"text\" name=\"tel\" value=\"\"><label class=\"telLabel\"><input type=\"checkbox\" name=\"telCheck\">없음</label></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th> 배송지주소 </th>\r\n");
      out.write("				<td><input type=\"text\" id=\"zipcode\" name=\"zipcode\" value=\"\" readonly> <button type=\"button\" class=\"btn search black\">주소검색</button></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th></th>\r\n");
      out.write("				<td><input type=\"text\" id=\"address1\" name=\"address1\" value=\"\" readonly></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th></th>\r\n");
      out.write("				<td><input type=\"text\" id=\"address2\" name=\"address2\" value=\"\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th></th>\r\n");
      out.write("				<td><label class=\"basicLabel\"><input type=\"checkbox\" name=\"basicCheck\">기본 배송지 설정</label></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("		<input type=\"hidden\" name=\"userid\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("		<input type=\"hidden\" name=\"id\" value=\"\">\r\n");
      out.write("		<input type=\"hidden\" name=\"teltel\" value=\"\">\r\n");
      out.write("		<input type=\"hidden\" name=\"basic\" value=\"\">\r\n");
      out.write("		<div class=\"registerBtn align_center\">\r\n");
      out.write("			<button type=\"reset\" class=\"btn cancle\">취소</button>\r\n");
      out.write("			<button type=\"button\" class=\"btn back\">돌아가기</button>\r\n");
      out.write("			<button type=\"button\" class=\"btn register black\">등록</button>\r\n");
      out.write("		</div>	\r\n");
      out.write("	</form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script src=\"../../../resources/js/board.js\"></script>\r\n");
      out.write("<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(document).ready(function(){\r\n");
      out.write("\r\n");
      out.write("	$(\".telLabel\").on(\"click\",function(e) {\r\n");
      out.write("		if($(\"input[name='telCheck']:checkbox\").is(\":checked\")){\r\n");
      out.write("			$(\"input[name='tel']\").attr(\"disabled\", \"disabled\");\r\n");
      out.write("		}\r\n");
      out.write("		else {\r\n");
      out.write("			$(\"input[name='tel']\").removeAttr(\"disabled\");\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("		\r\n");
      out.write("	function addressSearch() {\r\n");
      out.write("		new daum.Postcode({\r\n");
      out.write("			oncomplete: function(data) {\r\n");
      out.write("				// 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n");
      out.write("				// 각 주소의 노출 규칙에 따라 주소를 조합한다.\r\n");
      out.write("				// 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n");
      out.write("				var addr = ''; // 주소 변수\r\n");
      out.write("				var extraAddr = ''; // 참고항목 변수\r\n");
      out.write("				//사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.\r\n");
      out.write("				\r\n");
      out.write("				if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우\r\n");
      out.write("					addr = data.roadAddress;\r\n");
      out.write("				} else { // 사용자가 지번 주소를 선택했을 경우(J)\r\n");
      out.write("					addr = data.jibunAddress;\r\n");
      out.write("				}\r\n");
      out.write("\r\n");
      out.write("							\r\n");
      out.write("				// 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("				document.getElementById('zipcode').value = data.zonecode;\r\n");
      out.write("				document.getElementById(\"address1\").value = addr;\r\n");
      out.write("				\r\n");
      out.write("				// 커서를 상세주소 필드로 이동한다.\r\n");
      out.write("				document.getElementById(\"address2\").focus();\r\n");
      out.write("			}\r\n");
      out.write("		}).open(\"\",\"\",\"top=1000,left=1000\");\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	$(\".registerTable .btn.search\").on(\"click\", function(e) {\r\n");
      out.write("		addressSearch();\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("<script src=\"../../../resources/js/order.js\"></script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
